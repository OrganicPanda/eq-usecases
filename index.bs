<h1>Use Cases and Requirements for Element Queries</h1>
<pre class='metadata'>
Group: ricg
Status: ED
ED: http://responsiveimagescg.github.io/eq-usecases/
Shortname: eq-usecases
Level: 1
Editor: Mat Marquis, RICG, http://responsiveimages.org
Editor: Scott Jehl, Filament Group, http://filamentgroup.com/
Abstract: This document captures the use cases and requirements for standardizing a solution for “element queries.” 
Abstract: Found a bug, typo, or issue? Please file a <a href="https://github.com/ResponsiveImagesCG/eq-usecases/issues">bug on GitHub</a>!
!Version History: <a href="https://github.com/ResponsiveImagesCG/eq-usecases/commits/gh-pages">Commit History</a>
!Participate: <a href="irc://irc.w3.org:6665/#respimg">IRC: #respimg on W3C's IRC</a>
!Participate: <a href="https://github.com/ResponsiveImagesCG/eq-usecases">GitHub</a>
</pre>

<style>
[data-link-type=element] { font-family: monospace; }
[data-link-type=element]::before { content: "<" }
[data-link-type=element]::after { content: ">" }
img { max-width: 100%; }
</style>

<h2 id="intro">Introduction</h2>

Given a complex responsive layout, developers often require granular control over how the contents of an individual module will respond relative to the size of their parent container rather than the viewport size. This limitation conflicts with the goal of creating modular, independent components, often requiring a number of redundant CSS, complex exception cases, and workarounds, and the problem compounds itself depending on how dramatically a module adapts at each of its breakpoints.

This document presents some of the use cases that “element queries” would solve, in allowing authors to define layouts within an individual module on the basis of the size of the module itself rather than the viewport. The goal is to demonstrate, beyond a reasonable doubt, the need for a standardized method of allowing content to respond to its container’s dimensions (as opposed to the overall viewport size). This would facilitate the construction of layouts comprised of many modular, independent HTML components with a minimum of duplicated CSS and overrides specific to the modules’ parent containers.

<h2 id="status">Status of This Document</h2>

This document reflects the efforts of members from the <a href="http://www.w3.org/community/respimg/">Responsive Issues Community Group</a> (RICG), and with ongoing feedback from the designer/developer community via blog posts, informal polls, and other social media sources. The RICG's goal for this document is to make sure that developer requirements for element queries have been captured for the purpose of standardization.

<h2 id="usecase">Use Case</h2>

<a href="#fig-1">Figure 1</a> is an example of a relatively simple and fully self-contained module’s layout, using only a single <code>min-width</code> <a href="http://dev.w3.org/csswg/mediaqueries-4/#media-query">media query</a> to reflow content.

<figure id="fig-1">
	<img src="images/module-layout2.gif">
	<figcaption>An example of a self-contained module that requires a single breakpoint.</figcaption>
</figure>

In this layout, this module can occupy containing elements of varying widths, governed by multiple breakpoints. In small viewports, we’ll be using a linear layout where each of our five modules occupy the full viewport — this layout is covered by the base styles outside of our <a href="http://dev.w3.org/csswg/mediaqueries-4/#media-query">media query</a>. At higher breakpoints, these modules will be displayed side-by-side: three across, then below that two across. The three-across layout will be covered by the global styles within our viewport-based media query. Parent-specific overrides will need to be written for the two-across layout, as these modules will need to shift to their wide-format at a smaller viewport size than the ones above them.

<figure id="fig-2">
	<img src="images/eq-layout1-modules.gif">
	<figcaption>Some of the contexts in which the module in <a href="#fig-1">fig. 1</a> might appear.</figcaption>
</figure>

In order to accomplish this layout, a developer would need to duplicate all of this module’s “wide layout” styles into a second viewport-based media query—set to apply at a smaller min-width than the global breakpoint styles—with all of our styles scoped to a parent container. This now means that any future edits or bug fixes to the wide-format layout styles will need to be made in multiple places, and this maintenance cost increases exponentially with each module-level breakpoint required.

<figure id="fig-3">
	<img src="images/eq-heatmap1.gif">
	<figcaption>A stylesheet heatmap showing the redundant styles required to accomodate the layout variations in <a href="#fig-2">fig. 2</a> </figcaption>
</figure>

Similarly, introducing a new context unlike the previous two—shown in <a href="#fig-4">figure 4</a> with the introduction of a “sidebar” on an interior page layout—means duplicating or overriding all of a module’s media queries yet again. 

<figure id="fig-4">
	<img src="images/eq-layout2-modules.gif">
	<figcaption>A wireframe introducing a new context for the modules in <a href="#fig-1">fig. 1</a>, where no breakpoint should apply</figcaption>
</figure>

The module in this new sidebar context will never need to reflow to the wider layout, and as such we’re left with two options: scoping all of our modules—with the exception of the two-across layout—to a parent class, or introducing a new media query that overrides all of our wide-layout styles based on the sidebar’s parent class. Despite the relative simplicity of our module and our overall page layouts, one is left with a bloated and difficult to maintain stylesheet.

<figure id="fig-5">
	<img src="images/eq-heatmap2.gif">
	<figcaption>A stylesheet heatmap showing added redundancy and rewriting of existing styles required to accommodate the layout variation in <a href="#fig-4">fig. 4</a> </figcaption>
</figure>

<h2>Proposed solution</h2>
What this document proposes is the addition of an “element query” syntax, allowing breakpoints to be applied based on the width of a parent container. For the purposes of this example, we would then be able to scope out modules’ layouts to the size of the module itself.

<figure id="fig-7">
	<img src="images/eq-all-layouts-fixed.gif">
	<figcaption>A wireframe illustrating how a single module addresses all potential layout contexts <a href="#fig-2">fig. 2</a> and <a href="#fig-4">fig. 4</a>, given a native “element queries” solution</figcaption>
</figure>

In doing so, we’re able to assemble a layout without parent-specific media queries, styles, or overrides.

<figure id="fig-6">
	<img src="images/eq-heatmap3.gif">
	<figcaption>A stylesheet heatmap showing a lack of redundancy when accomodating the layout variations in <a href="#fig-2">fig. 2</a> and <a href="#fig-4">fig. 4</a>, given a native “element queries” solution</figcaption>
</figure>

<h2 id="acks">Acknowledgements</h2>

A <a href="http://www.w3.org/community/respimg/participants">complete list of participants</a> of the Responsive Images Community Group is available at the W3C Community Group Website.
